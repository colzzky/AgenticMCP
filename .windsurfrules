1. Write robust and testable code by fully adopting dependency injection - refer to ** Dependency Injection Policy/Standards for TypeScript (Without Third-Party Libraries)**

2. Always log your Progress to PROGRESS.jsonl - each line should be a valid JSON object and should contain the following fields:
    - timestamp: the current time in ISO 8601 format
    - action: the action you are taking
    - file: the file you are working on
    - line: the line number you are working on
    - column: the column number you are working on
    - message: a message describing what you are doing
    - task_number: the task number you are working on
    - task_title: the task title you are working on
    - task_description: the task description you are working on
    - task_assigned_to: the person assigned to the task you are working on
    - task_status: the status of the task you are working on

3. Always update task status in TASKS.jsonl - each line should be a valid JSON object and should contain the following fields:
    - task_number: the task number
    - title: the task title
    - description: the task description
    - assigned_to: the person assigned to the task
    - status: the status of the task

4. For Any new files added, run the "bash tree.sh" CLI command to list all the files and directories and update DIRECTORY.md

5. Always read the DIRECTORY.md to understand the project structure before working on a task
 - 5.1 when looking for files, always first refer to the DIRECTORY.md before using filesystem search tool
 - 5.2 if DIRECTORY.md is not helpful, only then should you use the filesystem search tool

6. Always read the TASKS.jsonl to understand the task list, and to understand the current task and its status before working on a task

7. Always read the PROGRESS.jsonl to understand the progress made on the project before working on a task

8. Always read the README.md to understand the project requirements before working on a task

9. Before marketing the task as complete, make sure to run tests and ensure that the code works as expected - only if test is applicable

10. For every completed task, do a "git add --all", "git commit" and "git push"

11. Everytime you need to use a library or third-party package/SDK/API, always make sure that you look-out for the latest documentation and use the latest version of the library or third-party package by using the tool "Context7" - if the library or third-party package is not available in the tool, use the web to search for the latest documentation and use the latest version of the library or third-party package

12. After creating or editing a file, always run "npm run lint --fix" to see any type/linting errors, and proceed to fix if errors are found - then run "npm run lint" to ensure that there are no errors - repeat process until there are no errors

13. When working on test files - Always run "npm run type-check:tests" to ensure that there are no type errors in the tests - repeat process until there are no errors
 - 13.1 When working on src files - Always run "npm run type-check:src" to ensure that there are no type errors in the src files - repeat process until there are no errors
 - 13.2 Finally run "npm run type-check" to ensure that there are no type errors in the entire project - repeat process until there are no errors

14. when creating/editing a javascript or typescript file, check the line count of the file and make sure it does not exceed the ideal line count per file. you can use tools such as "wc -l filename" to check the line count of the file of an existing file or count lines of a string using the tool "wc -l <(echo "string")" before creating a new file to make sure it does not exceed the ideal line count per file

15. If the file lines number exceeds the suggested number of lines based on "Rules: Ideal Line Count per File", then split the file into multiple files, just use "import" and "export" to share code between files, or use composables

16. If the library does not expose the type definitions, use the "Github" tool inspect the files in the github repository of the library to get the type definitions

17. filenames are camel case and all folder names are kebab-case

### ‚úÖ **Rules: Ideal Line Count per File**

1. **Limit each file to a single responsibility**
   * If a file is handling multiple unrelated concerns, split it.

2. **Cap most files between 100‚Äì300 lines**
   * This range supports readability and testability while allowing meaningful logic.

3. **Keep utility/helper files under 150 lines**
   * Utility files should focus on small, reusable functions. Split them when they start housing unrelated utilities.

4. **Limit test files to 300 lines max**
   * Group related test cases in the same file, but break them up if there are too many logical variations being tested.

5. **Interface and type files should stay under 150 lines**
   * Keep closely related types together; split into multiple files if modeling large, unrelated entities.

6. **Index (`index.ts`) and entry point files should stay under 50 lines**
   * These should primarily import, re-export, or initialize ‚Äî avoid complex logic.

7. **Avoid nesting more than 2 classes or large functions in a single file**
   * Deep nesting harms testability and makes files harder to reason about.

8. **If a file contains more than \~10 screenfuls of code, consider refactoring**
   * This is a soft limit based on visual length and ease of navigation.

9. **Split files when editing requires frequent scrolling or search**
   * Ease of navigation is critical for collaborative teams and future maintainers.

10. **Maintain separation of concerns across layers (service, controller, utils, etc.)**
    * Don‚Äôt mix types, logic, and API handlers in the same file.


### ‚úÖ **Rules: Testing**

1. Types/Interfaces are defined in the types directory - do not define types/interfaces in the test file itself or any tests directory
 - 1.1 Import types/interfaces from the revelant modules types directory
 
2. Consult Context7 tool to get the latest documentation of the library or third-party package before creating/mocking tests

3. Tests should verify correct behavior rather than specific implementation details. For example:
  - Instead of checking the exact parameter order in function calls, test that the functions produce the expected
  results
  - Instead of verifying that specific subcomponents were initialized with exact parameters, test that the system as
  a whole behaves correctly
  - For dependency injection tests, focus on verifying that components are properly registered and accessible, not
  the exact initialization order

---

# ‚úÖ Jest Mocking Standard for TypeScript Projects

This document defines the **only approved method** for mocking and testing in our TypeScript project using [`jest-mock-extended`](https://www.npmjs.com/package/jest-mock-extended). All mocks must follow this structure.

## ‚öôÔ∏è TypeScript Config

### `tsconfig.test.json`

```json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "strict": false,
    "noImplicitAny": false,
    "strictFunctionTypes": false,
    "skipLibCheck": true
  },
  "include": ["tests/**/*.ts"]
}
```

---

## ‚öôÔ∏è Jest Config

### `jest.config.ts`

```ts
import type { Config } from 'jest';

const config: Config = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: ['**/tests/**/*.test.ts'],
  moduleFileExtensions: ['ts', 'js'],
  rootDir: '.',
};

export default config;
```

---

## üì¶ Install Dev Dependencies

```bash
npm install --save-dev jest ts-jest typescript jest-mock-extended
```

---

## ‚úÖ Approved Mocking Pattern (Simple Class or Interface)

### `src/services/fileService.ts`

```ts
export class FileService {
  read(path: string): string {
    return `file content from ${path}`;
  }
}
```

---

### `tests/services/fileService.test.ts`

```ts
import { MockProxy, mock, mockReset } from 'jest-mock-extended';
import { FileService } from '../../../src/services/fileService';

describe('FileService', () => {
  let fileServiceMock: MockProxy<FileService>;

  beforeEach(() => {
    fileServiceMock = mock<FileService>();
    mockReset(fileServiceMock);
  });

  test('should return mocked file content', () => {
    fileServiceMock.read.mockReturnValue('mocked content');
    expect(fileServiceMock.read('foo.txt')).toBe('mocked content');
  });
});
```

---

## ‚úÖ Advanced Mocking with `calledWith()` Matchers

```ts
import { MockProxy, mock } from 'jest-mock-extended';

interface PartyProvider {
  getSongs: (type: string) => string[];
}

const provider: MockProxy<PartyProvider> = mock<PartyProvider>();

provider.getSongs.calledWith('disco party').mockReturnValue([
  'Dance the night away',
  'Stayin Alive',
]);

expect(provider.getSongs('disco party')).toEqual([
  'Dance the night away',
  'Stayin Alive',
]);
```

---

## ‚úÖ Deep Mocks for Nested Interfaces/Classes

```ts
import { DeepMockProxy, mockDeep } from 'jest-mock-extended';

interface Service {
  inner: {
    fetchData: (id: number) => string;
  };
}

const serviceMock: DeepMockProxy<Service> = mockDeep<Service>();

serviceMock.inner.fetchData.calledWith(1).mockReturnValue('data-1');

expect(serviceMock.inner.fetchData(1)).toBe('data-1');
```

---

## ‚úÖ Enforcing Return Values (Fallback Error)

```ts
import { mock } from 'jest-mock-extended';

interface StrictAPI {
  fetch: () => string;
}

const strictMock = mock<StrictAPI>({}, {
  fallbackMockImplementation: () => {
    throw new Error('missing return value');
  }
});

expect(() => strictMock.fetch()).toThrowError('missing return value');
```

---

## ‚úÖ Resetting Mocks

Always use `mockReset()` inside `beforeEach` to avoid state leaks:

```ts
import { mockReset } from 'jest-mock-extended';

beforeEach(() => {
  mockReset(myMock);
});
```

---

## üîê Rules & Conventions

| Rule                                               | Description                              |
| -------------------------------------------------- | ---------------------------------------- |
| ‚úÖ Use `mock<T>()` or `mockDeep<T>()`               | Always use `jest-mock-extended` helpers  |
| ‚úÖ Use `MockProxy<T>` or `DeepMockProxy<T>`         | Ensures correct mock typings             |
| ‚úÖ Reset mocks with `mockReset()` in `beforeEach`   | Prevents stale state                     |
| ‚úÖ Use `calledWith()` for argument matching         | Improves readability and type safety     |
| ‚ùå Do not use `jest.mock(...)` manually             | We standardize on type-safe mocking only |
| ‚ùå Do not use `any`, `@ts-ignore`, or untyped mocks | Type safety must be preserved            |

---

## üßº Cleanup Notes

* Always use one mock object per test file
* Do not reuse mock instances across tests
* All return values must be explicitly defined or throw

## ‚úÖ Developer Checklist

| Task                                        | Done? |
| ------------------------------------------- | ----- |
| `tsconfig.test.json` present and used?      | ‚úÖ    |
| `jest-mock-extended` used for all mocks?    | ‚úÖ    |
| `jest.resetModules()` used in `beforeEach`? | ‚úÖ    |
| No hardcoded fake structures?               | ‚úÖ    |
| All mock types inferred from real classes?  | ‚úÖ    |

## ** Dependency Injection Policy/Standards for TypeScript (Without Third-Party Libraries)**

The goal of this policy is to promote best practices for applying the **Dependency Injection (DI)** pattern in TypeScript, ensuring that the resulting code is modular, maintainable, and easily testable. The pattern will be implemented using **constructor injection** without relying on third-party libraries. The emphasis is on clear dependency management, loose coupling, and high testability.

---

### **1. Constructor Injection as the Primary Method**

* **Rule**: **Constructor injection** must be the default approach for passing dependencies into classes.
* **Reason**: Constructor injection enforces the explicit declaration of dependencies and guarantees that all required dependencies are available when the object is instantiated. It promotes immutability and makes testing easier by allowing direct control over what dependencies are passed into the object.

```typescript
class DatabaseService {
  private connectionString: string;

  constructor(connectionString: string) {
    this.connectionString = connectionString;
  }

  connect() {
    console.log(`Connecting to ${this.connectionString}`);
  }
}
```

---

### **2. Avoid Global State or `globalThis` for Dependency Injection**

* **Rule**: **Never use `globalThis` or global variables** to manage or store shared dependencies.
* **Reason**: Storing dependencies globally (in the global scope or in a singleton pattern) leads to tight coupling, harder-to-track dependencies, and makes the code difficult to unit test. Tests might become unreliable, as the global state can be modified between tests.
* **Alternative**: Inject dependencies at the constructor level, and pass them explicitly to where they are needed.

```typescript
// Bad Example
globalThis.databaseConnection = new DatabaseService('mongodb://localhost');
```

```typescript
// Good Example
class UserService {
  private dbService: DatabaseService;

  constructor(dbService: DatabaseService) {
    this.dbService = dbService;
  }
}
```

---

### **3. Avoid the Service Locator Pattern**

* **Rule**: **Do not use service locator or registry patterns** to fetch or manage dependencies.
* **Reason**: The **service locator** pattern hides dependencies and makes it unclear where and how objects are constructed. It forces classes to retrieve their dependencies through a global or static registry, leading to a hidden and fragile dependency graph, making testing and maintenance difficult.

```typescript
// Bad Example
class ServiceLocator {
  static getService(serviceName: string) {
    // Returns services from a registry or static store
  }
}

class UserService {
  private logger: Logger;

  constructor() {
    this.logger = ServiceLocator.getService('Logger');
  }
}
```

* **Alternative**: Dependencies should be injected through constructors and not fetched from a registry.

---

### **4. Avoid Multiple Dependency Injection Mechanisms**

* **Rule**: **Always inject dependencies via the constructor, never mix with setter or interface injection**.
* **Reason**: Mixing different dependency injection mechanisms within the same project (e.g., constructor, setter, and interface injection) leads to confusion and an unclear dependency model. For consistency and clarity, constructor injection should be the sole mechanism for providing dependencies.

```typescript
// Bad Example: Mixing constructor and setter injection
class UserService {
  private logger: Logger;

  constructor() {}

  setLogger(logger: Logger) {
    this.logger = logger;
  }
}
```

---

### **5. Define Dependencies Clearly with Interfaces**

* **Rule**: **Use interfaces or abstract classes** to define the contracts of dependencies, especially for services and external APIs.
* **Reason**: Interfaces allow for **flexibility** in choosing different implementations without changing the dependent class. It also enhances testability, as mocks or stubs can be provided easily for unit testing.
* **Example**:

```typescript
interface Logger {
  log(message: string): void;
}

class ConsoleLogger implements Logger {
  log(message: string): void {
    console.log(`Log: ${message}`);
  }
}

class UserService {
  private logger: Logger;

  constructor(logger: Logger) {
    this.logger = logger;
  }

  getUserInfo(userId: string): string {
    this.logger.log(`Fetching user info for ${userId}`);
    return `User info for ${userId}`;
  }
}
```

---

### **6. Avoid Instantiating Dependencies Within a Class**

* **Rule**: **Never instantiate dependencies inside the class** itself; always inject them via the constructor.
* **Reason**: Instantiating dependencies within the class leads to tight coupling and reduced testability. It forces the class to manage the lifecycle of its dependencies, making it hard to substitute real dependencies with mock ones during testing.
* **Example**:

```typescript
// Bad Example: Instantiating dependency inside class
class UserService {
  private logger: Logger = new ConsoleLogger();

  getUserInfo(userId: string): string {
    this.logger.log(`Fetching user info for ${userId}`);
    return `User info for ${userId}`;
  }
}
```

* **Alternative**: Inject the `Logger` dependency through the constructor.

---

### **7. Minimize Constructor Parameter Length**

* **Rule**: **Avoid constructors with too many parameters** (i.e., more than 3‚Äì4). If a class requires many dependencies, consider refactoring it or grouping related dependencies into a new class or service.
* **Reason**: A constructor with many dependencies can make it hard to understand and maintain the class. It can also make testing more complex. If a class has too many dependencies, it might be doing too much and could benefit from refactoring into smaller, more focused classes.

```typescript
// Bad Example: Too many constructor parameters
class UserService {
  constructor(
    private logger: Logger,
    private userRepository: UserRepository,
    private authService: AuthService,
    private paymentService: PaymentService
  ) {}
}
```

* **Alternative**: Refactor the `UserService` class into smaller, focused services.

---

### **8. Ensure Explicit Dependency Management**

* **Rule**: **Always inject and pass down all dependencies explicitly**, even if a class doesn‚Äôt directly use a particular dependency.
* **Reason**: Implicit dependencies can lead to hidden complexities and make testing difficult. Always be clear about what a class needs and pass dependencies explicitly to it.
* **Example**:

```typescript
// Bad Example: Implicit dependency through other classes
class UserService {
  private logger: Logger;

  constructor(logger: Logger) {
    // Dependency is only set when needed indirectly
    // This is a poor practice
  }

  getUserInfo(userId: string): string {
    return `User info for ${userId}`;
  }
}
```

* **Alternative**: Dependencies should be injected explicitly and kept clear throughout the object graph.

---

### **9. Testability First**

* **Rule**: **Always think about the testability of the code** when injecting dependencies. The dependencies should be easily mockable or stubbed in tests.
* **Reason**: DI makes it easier to write unit tests because it allows for mocking or stubbing dependencies. For good testability, keep dependencies clear and isolated in your classes.
* **Example**:

```typescript
// Testable code with DI
const loggerMock = { log: jest.fn() };
const userService = new UserService(loggerMock);

// Now, you can test the service without real logging.
expect(userService.getUserInfo('123')).toBe('User info for 123');
expect(loggerMock.log).toHaveBeenCalled();
```

---

### **10. Single Responsibility Principle (SRP) and DI**

* **Rule**: **Each class should only be responsible for one thing**, and dependencies should align with that responsibility.
* **Reason**: If a class is receiving many dependencies, it's a signal that it might be violating the **Single Responsibility Principle** (SRP). Refactor the class to separate concerns, and inject only the dependencies that are strictly necessary for the class to fulfill its single responsibility.

---

### **11. Inject Instances, Not Constructors**

* **Rule**: **Inject instances of dependencies**, not the constructor types (i.e., `typeof Class`).
* **Reason**: Injecting **instances** (using `InstanceType<typeof Class>`) ensures that you're working with an actual object, not the class itself. This avoids unnecessary instantiations inside the class and promotes better clarity, testability, and separation of concerns.
* **Example**:

```typescript
// Bad Pattern: Injecting the constructor type of Logger
class UserService {
  private logger: typeof Logger;

  constructor(logger: typeof Logger) {
    this.logger = logger;
  }

  getUserInfo(userId: string): string {
    const loggerInstance = new this.logger();
  }
}

// Good Pattern: Injecting an instance of Logger
class UserService {
  private logger: InstanceType<typeof Logger>;

  constructor(logger: InstanceType<typeof Logger>) {
    this.logger = logger;
  }

  getUserInfo(userId: string): string {
    const loggerInstance = this.logger;
  }
}
```

---

### **12. Inject External Utility Modules (e.g., `path`, `fs`) via Constructor**

* **Rule**: **Always inject external dependencies like `path` and `fs` (or any other utility modules) through the constructor** instead of directly importing them inside the class.
* **Reason**: Directly importing utility modules like `path` or `fs` within a class leads to tight coupling, making the class less flexible, harder to test, and harder to reuse in other contexts. By injecting the dependencies via the constructor, you can mock or stub these modules in unit tests and swap them for different implementations without modifying the class itself.
* **Example**:

```typescript
import * as path from 'node:path';
import * as fs from 'node:fs/promises';

// Bad Pattern: Directly importing path and fs
class UserService {
  getPath(sourcePath: string): string {
    return path.basename(sourcePath || '')
  }

  getSize(sourcePath: string): number {
    return fs.stat(sourcePath);
  }
}

// Good Pattern: Injecting path and fs via constructor
class UserService {
  pathDi: typeof path;
  fsDi: typeof fs;

  constructor(pathDi: typeof path, fsDi: typeof fs) {
    this.pathDi = pathDi;
    this.fsDi = fsDi;
  }

  getPath(sourcePath: string): string {
    return this.pathDi.basename(sourcePath || '')
  }

  getSize(sourcePath: string): number {
    return this.fsDi.stat(sourcePath);
  }
}
```

---

### **Summary of Key Rules**

* Use **constructor injection** for all dependency management.
* **Avoid using global state**, `globalThis`, or any form of a global registry.
* **Don‚Äôt use the service locator pattern**; dependencies should be explicit in the constructor.
* **Keep dependency chains clean and consistent** ‚Äî avoid mixing injection styles.
* Always define dependencies via **interfaces** for flexibility and testability.
* **Keep constructor length reasonable** and consider **refactoring** when it gets too long.
* **Testability** should be your first concern ‚Äî always design for mockability.
* **Inject instances**, not class constructors (`typeof Class`).
* **Inject external utility modules** like `path` and `fs` via constructor to avoid tight coupling and enhance flexibility.

By adhering to these guidelines, your TypeScript codebase will be modular, testable, and easy to maintain. Each class will have a clear set of dependencies, and testing them in isolation will be simple and straightforward.